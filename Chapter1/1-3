1.3递归简论
当一个函数用它自己来定义时就称为是递归（recursive）的。
C的递归函数若无基准情况，也是毫无意义的。举个例子：
int
F( int X )
{
    if( X == 0 )			/* 1*/
	return 0;			/* 2*/
    else
	return 2 * F( X - 1 ) + X * X;	/* 3*/
}
基准情况为：F( 0 ) = 0;

我们给定X=4;
则程序第3行，2 * F( 3 ) + 4 * 4;
由于F( 3 )则 2 * F( 2 ) + 3 * 3;
由于F( 2 )则 2 * F( 1 ) + 2 * 2;
由于F( 1 )则 2 * F( 0 ) + 1 * 1;
由于F( 0 )则,执行第1行和第2行,也就是基准情况。
可见这个基准情况是必须的。否则递归陷入死循环。

递归的 4 个基本法则：
1.基准情形（base case）。必须要有基准情形，它们不用递归就能求解。
2.不断推进（making progress）。对于那些需要递归求解的情形，递归调用必须总能够朝着产生基准情形的方向发展。
3.设计法则。假设所有的递归调用都能运行。
4.合成效益法则（compound interest rule）。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。

最后，记住这些法则。
